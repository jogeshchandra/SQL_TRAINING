1)Find the titles of all movies directed by Steven Spielberg.

mysql> select title from movie where director ="Steven Spielberg";
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.04 sec)

2)Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.

mysql> select m.year from movie m join rating r on m.mid=r.mid where r.stars=4 or r.stars=5 order by m.year;
+------+
| year |
+------+
| 1937 |
| 1937 |
| 1981 |
| 1981 |
| 1993 |
| 2009 |
+------+
6 rows in set (0.00 sec)

3)Find the titles of all movies that have no ratings.

mysql> select m.title from movie m left join rating r on m.mid=r.mid where r.stars is null;
+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+
2 rows in set (0.00 sec)

4)Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. 

mysql> select r.name from reviewer r join rating r1 on r.rid=r1.rid where r1.ratingdate is null;
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set (0.00 sec)

5)Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars.

mysql> select r.name , m.title,r1.stars,r1.ratingdate from (movie m join rating r1 on r1.mid=m.mid ) join reviewer r on r.rid=r1.rid order by r.name,m.title,r1.stars;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingdate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.04 sec)

6)For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie.

mysql> select r.name,m.title from movie m join rating r1 on r1.mid=m.mid join reviewer r on r.rid=r1.rid join rating r2 on r2.mid=m.mid where (r2.stars>r1.stars) and r2.ratingdate>r1.ratingdate group by m.title having count(m.title)>1;
+----------------+--------------------+
| name           | title              |
+----------------+--------------------+
| Sarah Martinez | Gone with the Wind |
+----------------+--------------------+
1 row in set (0.00 sec)

mysql> select r.name,m.title from movie m join rating r1 on r1.mid=m.mid join reviewer r on r.rid=r1.rid join rating r2 on (r2.mid=m.mid) and (r2.rid=r1.rid) where (r2.stars>r1.stars) and r2.ratingdate>r1.ratingdate;
+----------------+--------------------+
| name           | title              |
+----------------+--------------------+
| Sarah Martinez | Gone with the Wind |
+----------------+--------------------+
1 row in set (0.00 sec) 

7)For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title.

mysql> select m.title,max(r.stars) from movie m join rating r on r.mid=m.mid group by m.title order by m.title;
+-------------------------+--------------+
| title                   | max(r.stars) |
+-------------------------+--------------+
| Avatar                  |            5 |
| E.T.                    |            3 |
| Gone with the Wind      |            4 |
| Raiders of the Lost Ark |            4 |
| Snow White              |            5 |
| The Sound of Music      |            3 |
+-------------------------+--------------+
6 rows in set (0.00 sec)

8)For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title


mysql> select m.title,max(r.stars)-min(r.stars) as ratingSpread from movie m join rating r on m.mid=r.mid group by m.title order by ratingSpread desc;
+-------------------------+--------------+
| title                   | ratingSpread |
+-------------------------+--------------+
| Gone with the Wind      |            2 |
| Raiders of the Lost Ark |            2 |
| Avatar                  |            2 |
| Snow White              |            1 |
| The Sound of Music      |            1 |
| E.T.                    |            1 |
+-------------------------+--------------+
6 rows in set (0.00 sec)

9)Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) 


mysql> select avg(t1.before1980)-avg(t2.after1980) from (
    ->  (select avg(r.stars) as before1980 from movie m join rating r on r.mid=m.mid where m.year<1980 group by m.title) as t1 ,
    ->  (select avg(r.stars) as  after1980 from movie m join rating r on r.mid=m.mid where m.year>1980 group by m.title) as t2 );
+--------------------------------------+
| avg(t1.before1980)-avg(t2.after1980) |
+--------------------------------------+
|                           0.29167500 |
+--------------------------------------+
1 row in set (0.00 sec)

10)Find the names of all reviewers who rated Gone with the Wind.

mysql> select r.name from movie m join rating r1 on r1.mid=m.mid join reviewer r on r.rid=r1.rid where m.title ="Gone with the Wind";
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Sarah Martinez |
| Mike Anderson  |
+----------------+
3 rows in set (0.00 sec)

11)For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. 

mysql> select r.name,m.title,r1.stars from movie m join rating r1 on r1.mid=m.mid join reviewer r on r.rid=r1.rid where m.director=r.name;
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
1 row in set (0.00 sec)

12)Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

mysql> select * from ( select name from reviewer union select title from movie ) as T1 order by T1.name;
+-------------------------+
| name                    |
+-------------------------+
| Ashley White            |
| Avatar                  |
| Brittany Harris         |
| Chris Jackson           |
| Daniel Lewis            |
| E.T.                    |
| Elizabeth Thomas        |
| Gone with the Wind      |
| James Cameron           |
| Mike Anderson           |
| Raiders of the Lost Ark |
| Sarah Martinez          |
| Snow White              |
| Star Wars               |
| The Sound of Music      |
| Titanic                 |
+-------------------------+
16 rows in set (0.04 sec)

13)Find the titles of all movies not reviewed by Chris Jackson.

mysql> select title from movie where mid not in (select r1.mid from rating r1 join reviewer r on r.rid=r1.rid where r.name="Chris Jackson");
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+
5 rows in set (0.04 sec)


14)For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. 


15)For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.

mysql> select name,title,stars from movie m join rating r1 on r1.mid=m.mid join reviewer r on r.rid=r1.rid where stars in (select min(stars) from rating);
+-----------------+-------------------------+-------+
| name            | title                   | stars |
+-----------------+-------------------------+-------+
| Sarah Martinez  | Gone with the Wind      |     2 |
| Brittany Harris | The Sound of Music      |     2 |
| Brittany Harris | Raiders of the Lost Ark |     2 |
| Chris Jackson   | E.T.                    |     2 |
+-----------------+-------------------------+-------+
4 rows in set (0.00 sec)

16)List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. 

mysql> select m.title , avg(r1.stars) as avg from movie m join rating r1 on r1.mid=m.mid group by m.title order by m.title;
+-------------------------+--------+
| title                   | avg    |
+-------------------------+--------+
| Avatar                  | 4.0000 |
| E.T.                    | 2.5000 |
| Gone with the Wind      | 3.0000 |
| Raiders of the Lost Ark | 3.3333 |
| Snow White              | 4.5000 |
| The Sound of Music      | 2.5000 |
+-------------------------+--------+
6 rows in set (0.00 sec)

17)Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) 

mysql> select r.name,r.rid from rating r1 join reviewer r on r.rid=r1.rid group by r.rid having count(r.rid)>=3;
+-----------------+-----+
| name            | rid |
+-----------------+-----+
| Brittany Harris | 203 |
| Chris Jackson   | 205 |
+-----------------+-----+
2 rows in set (0.00 sec)

18)Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.)

mysql> select title,director from movie m1 where ( select count(*) from movie m2 where m2.director=m1.director )>1;
+-------------------------+------------------+
| title                   | director         |
+-------------------------+------------------+
| E.T.                    | Steven Spielberg |
| Titanic                 | James Cameron    |
| Avatar                  | James Cameron    |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+
4 rows in set (0.00 sec)

19)Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)


