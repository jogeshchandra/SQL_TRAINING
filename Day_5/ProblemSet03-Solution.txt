1)Find the names of all students who are friends with someone named Gabriel. (1 point possible)

mysql> select h.name from highschooler h inner join friend f on h.id=f.id1 inner join highschooler h1 on f.id2=h1.id where h1.name='Gabriel' ;
+---------+
| name    |
+---------+
| Jordan  |
| Alexis  |
| Jessica |
+---------+
3 rows in set (0.00 sec)


2)For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. (1 point possible)

mysql> select h1.name,h1.grade,h2.name,h2.grade from highschooler h1 join likes l on h1.id=l.id1 join highschooler h2 on h2.id=l.id2 where h1.grade-h2.grade>=2;
+------+-------+-------+-------+
| name | grade | name  | grade |
+------+-------+-------+-------+
| John |    12 | Haley |    10 |
+------+-------+-------+-------+
1 row in set (0.00 sec)


3)For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. (1 point possible)

mysql> select * from highschooler h1 join likes l on h1.id=l.id1 join highschooler h2 on h2.id=l.id2;
+------+----------+-------+------+------+------+---------+-------+
| ID   | name     | grade | ID1  | ID2  | ID   | name    | grade |
+------+----------+-------+------+------+------+---------+-------+
| 1025 | John     |    12 | 1025 | 1101 | 1101 | Haley   |    10 |
| 1247 | Alexis   |    11 | 1247 | 1468 | 1468 | Kris    |    10 |
| 1641 | Brittany |    10 | 1641 | 1468 | 1468 | Kris    |    10 |
| 1911 | Gabriel  |    11 | 1911 | 1247 | 1247 | Alexis  |    11 |
| 1934 | Kyle     |    12 | 1934 | 1501 | 1501 | Jessica |    11 |
| 1316 | Austin   |    11 | 1316 | 1304 | 1304 | Jordan  |    12 |
| 1501 | Jessica  |    11 | 1501 | 1934 | 1934 | Kyle    |    12 |
+------+----------+-------+------+------+------+---------+-------+
7 rows in set (0.00 sec)

4)Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. (1 point possible)

	

mysql> select name , grade from highschooler where id not in (select distinct id1 from likes union select distinct id2 from likes ) order by grade,name;
+-----------+-------+
| name      | grade |
+-----------+-------+
| Cassandra |     9 |
| Jordan    |     9 |
| Tiffany   |     9 |
| Andrew    |    10 |
| Logan     |    12 |
+-----------+-------+
5 rows in set (0.01 sec)

5)For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. (1 point possible)

--not complte solu--
mysql> select h.name,h.grade from highschooler h join  likes l1 on l1.id1=h.id left join likes l2 on l1.id2=l2.id1 where l2.id1 is null;
+----------+-------+
| name     | grade |
+----------+-------+
| Brittany |    10 |
| Alexis   |    11 |
| Austin   |    11 |
| John     |    12 |
+----------+-------+
4 rows in set (0.00 sec)

--complete solu---
mysql> select h1.name,h1.grade,h2.name,h2.grade from highschooler h1 join likes l on h1.id=l.id1 join highschooler h2 on
 h2.id=l.id2 where h2.id not in ( select distinct id1 from likes );
+----------+-------+--------+-------+
| name     | grade | name   | grade |
+----------+-------+--------+-------+
| John     |    12 | Haley  |    10 |
| Alexis   |    11 | Kris   |    10 |
| Brittany |    10 | Kris   |    10 |
| Austin   |    11 | Jordan |    12 |
+----------+-------+--------+-------+
4 rows in set (0.00 sec)

6)Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. (1 point possible)

mysql> select name,grade from highschooler h1 where id not in  ( select id1 from friend f ,highschooler h2 where h1.id=f.id1 and h2.id=f.id2 and h1.grade <> h2.grade ) order by grade,name;
+-----------+-------+
| name      | grade |
+-----------+-------+
| Cassandra |     9 |
| Jordan    |     9 |
| Andrew    |    10 |
| Brittany  |    10 |
| Haley     |    10 |
| Kris      |    10 |
| Gabriel   |    11 |
| John      |    12 |
| Jordan    |    12 |
| Logan     |    12 |
+-----------+-------+
10 rows in set (0.00 sec)


7)For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. (1 point possible)



8)Find the difference between the number of students in the school and the number of different first names. (1 point possible)



9)Find the name and grade of all students who are liked by more than one other student. (1 point possible)

mysql> select name,grade from highschooler h join likes l on h.id=l.id1 group by id2 having count(id2)>1;
+----------+-------+
| name     | grade |
+----------+-------+
| Brittany |    10 |
+----------+-------+
1 row in set (0.00 sec)

10)For every situation where student A likes student B, but student B likes a different student C, return the names and grades of A, B, and C. (1 point possible)

mysql> select * from highschooler h1 join likes l1 on h1.id=l1.id1 join likes l2 on l1.id2=l2.id1 where l2.id2 <> l1.id1;
+------+---------+-------+------+------+------+------+
| ID   | name    | grade | ID1  | ID2  | ID1  | ID2  |
+------+---------+-------+------+------+------+------+
| 1911 | Gabriel |    11 | 1911 | 1247 | 1247 | 1468 |
+------+---------+-------+------+------+------+------+
1 row in set (0.00 sec)

11)Find those students for whom all of their friends are in different grades from themselves. Return the students' names and grades.(1 point possible)

mysql> select name,grade from highschooler h1 where grade not in (select h2.grade from highschooler h2,friend f where h1.id=f.id1 and h2.id=f.id2  );
+-----------+-------+
| name      | grade |
+-----------+-------+
| Gabriel   |     9 |
| Cassandra |     9 |
| Andrew    |    10 |
| Austin    |    11 |
+-----------+-------+
4 rows in set (0.00 sec)


12)What is the average number of friends per student? (Your result should be just one number.) (1 point possible)

mysql> select avg(x) from ( select count(*) as x from friend group by id1 ) as c;
+--------+
| avg(x) |
+--------+
| 2.4375 |
+--------+
1 row in set (0.04 sec)

13)Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend.



14)Find the name and grade of the student(s) with the greatest number of friends. (1 point possible)

mysql> select name,grade from highschooler h join friend f on h.id=f.id1 group by id1 having count(*) = (select max(c1) from ( select count(*) as c1 from friend group by id1 )as v);
+--------+-------+
| name   | grade |
+--------+-------+
| Alexis |    11 |
+--------+-------+
1 row in set (0.01 sec)
